import process, { stderr, stdout } from "node:process";
import path from "node:path";
import { copyFileSync, readFileSync, writeFileSync } from "node:fs";
import { exec } from "node:child_process";

import * as dotenv from "dotenv";
import esbuild from "esbuild";
import builtins from "builtin-modules";

dotenv.config();

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
const buildOptions = {
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts", "styles.css"],
	bundle: true,
	outdir: "dist",
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
};

const context = await esbuild.context(buildOptions);

if (prod) {
	await context.rebuild();

	/**
	 * If there is a new version number:
	 * - update the manifest.json file and copy it to the dist folder
	 * - update the versions.json file
	 */
	const manifestJsonSrc = path.join(process.cwd(), "manifest.json");
	const manifest = JSON.parse(readFileSync(manifestJsonSrc, "utf8"));
	const pathToOutputDir = path.join(process.cwd(), buildOptions.outdir);
	if (process.env.npm_new_version) {
		// 	process.env.npm_lifecycle_event,
		// 	process.env.npm_package_version,
		// 	process.env.npm_new_version
		const targetVersion = process.env.npm_new_version;
		const manifestJsonDist = path.join(
			process.cwd(),
			buildOptions.outdir,
			"manifest.json"
		);
		// Read the manifest.json file, update the version number and save the change
		manifest.version = targetVersion;
		writeFileSync(manifestJsonSrc, JSON.stringify(manifest, null, "\t"));

		// Copy the manifest.json file over to the dist folder
		copyFileSync(manifestJsonSrc, manifestJsonDist);

		// Read the versions.json file, set the new version number as a new key with the value of minAppVersion from manifest.json
		const versionsJsonSrc = path.join(process.cwd(), "versions.json");
		const versions = JSON.parse(readFileSync(versionsJsonSrc, "utf8"));
		versions[targetVersion] = manifest.minAppVersion;
		writeFileSync(versionsJsonSrc, JSON.stringify(versions, null, "\t"));
	}
	const testTargetDir = path.join(process.env.APP_PLUGIN_DIR, manifest.id);
	// Auto deploy into the plugins folder of the installed obsidian for testing
	exec(
		`cp ${pathToOutputDir}/* ${testTargetDir}/`,
		(error, stdout, stderr) => {
			if (error) {
				throw error;
			}
			console.log(stdout);
			console.log(
				"+---+> Auto deploy to the plugins folder of the installed obsidian for testing"
			);
			process.exit(0);
		}
	);
	// process.exit(0);
} else {
	await context.watch();
}
